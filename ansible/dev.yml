---
- name: Setup Development Environment
  hosts: localhost
  become: no
  vars:
    project_root: "{{ playbook_dir }}/.."
    terraform_dir: "{{ project_root }}/terraform"
    rust_version: "1.82.0"
    terraform_version: "1.9.8"

  tasks:
    - name: Install system dependencies
      apt:
        name:
          - build-essential
          - curl
          - unzip
          - python3-pip
          - git
        state: present
        update_cache: yes

    - name: Install AWS CLI
      pip:
        name: awscli
        state: present

    - name: Install Terraform
      block:
        - name: Download Terraform
          get_url:
            url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
            dest: /tmp/terraform.zip
            mode: '0644'

        - name: Extract Terraform
          unarchive:
            src: /tmp/terraform.zip
            dest: /usr/local/bin
            mode: '0755'
            remote_src: yes

    - name: Install Rust
      block:
        - name: Download Rustup
          get_url:
            url: https://sh.rustup.rs
            dest: /tmp/rustup.sh
            mode: '0755'

        - name: Install Rust
          shell: /tmp/rustup.sh -y
          args:
            creates: ~/.cargo/bin/rustc

    - name: Install cargo-lambda
      shell: cargo install cargo-lambda
      args:
        creates: ~/.cargo/bin/cargo-lambda

    - name: Build Rust Lambda function
      shell: |
        cd {{ project_root }}
        cargo lambda build --release
      args:
        creates: "{{ project_root }}/target/lambda/release/bootstrap"

    - name: Ensure Lambda function directory exists
      file:
        path: "{{ terraform_dir }}/lambda"
        state: directory
        mode: '0755'

    - name: Copy Lambda function to Terraform directory
      copy:
        src: "{{ project_root }}/target/lambda/release/bootstrap"
        dest: "{{ terraform_dir }}/lambda/lambda_function.zip"
        mode: '0755'